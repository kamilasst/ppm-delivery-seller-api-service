name: Java CI com Maven e PostgreSQL

# Dispara o workflow em Pull Requests direcionados a branch 'main'
on:
  pull_request:
    branches: [ main ] # Ou sua branch padrao, ex: master

jobs:
  build-and-test:
    runs-on: ubuntu-latest # Utiliza a ultima versao do Ubuntu como runner

    steps:
    - name: Checkout do repositorio
      uses: actions/checkout@v4 # Acao para baixar o codigo do seu repositorio

    - name: Configurar JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin' # Distribuicao do JDK (Temurin e uma boa escolha)

    - name: Cache de pacotes Maven
      uses: actions/cache@v4
      with:
        path: ~/.m2/repository # Caminho onde o Maven armazena as dependencias baixadas
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }} # Chave de cache baseada no SO e no hash do pom.xml
        restore-keys: | # Chaves de restauraccao alternativas
          ${{ runner.os }}-maven-

    - name: Iniciar container PostgreSQL com Docker Compose
      run: docker-compose up -d postgres
      # Este comando utiliza o arquivo 'docker-compose.yml' na raiz do seu repositorio.
      # O servico 'postgres' definido no seu docker-compose.yml sera iniciado.

    - name: Aguardar PostgreSQL ficar pronto
      run: |
        echo "Aguardando o PostgreSQL iniciar..."
        # Loop para verificar a prontidao do PostgreSQL por ate 30 segundos.
        # Ele tenta se conectar usando 'pg_isready' dentro do container do postgres.
        # O usuario padrao para a imagem postgres e 'postgres'.
        for i in {1..15}; do
          if docker exec $(docker-compose ps -q postgres) pg_isready -U postgres -d database-seller -h localhost; then
            echo "PostgreSQL esta pronto."
            exit 0
          fi
          sleep 2
        done
        echo "PostgreSQL nao ficou pronto a tempo."
        exit 1
      # NOTA: Se seus testes utilizam Testcontainers exclusivamente para o PostgreSQL,
      # este passo explicito de 'docker-compose up' e a espera podem ser redundantes,
      # pois o Testcontainers gerenciara suas proprias instancias de banco de dados.
      # No entanto, se algum teste espera um BD em localhost:5432 conforme o docker-compose, este passo e necessario.

    - name: Rodar testes unitarios com Maven
      run: mvn -B test
      # Certifique-se de que seu arquivo src/test/resources/application.properties (ou propriedades especificas de perfil)
      # esteja configurado para conectar ao banco de dados PostgreSQL, caso seus testes nao usem Testcontainers para isso:
      # Exemplo de configuracao para application-test.properties:
      # spring.datasource.url=jdbc:postgresql://localhost:5432/database-seller
      # spring.datasource.username=postgres # Usuario padrao da imagem postgres, a menos que POSTGRES_USER esteja definido
      # spring.datasource.password=123456
      # spring.jpa.hibernate.ddl-auto=create-drop # ou validate, update para testes

    # Opcional: Parar os servicos do Docker Compose explicitamente.
    # O ambiente do runner e geralmente limpo automaticamente.
    # - name: Parar servicos
    #   if: always() # Garante que este passo rode mesmo se os anteriores falharem
    #   run: docker-compose down
